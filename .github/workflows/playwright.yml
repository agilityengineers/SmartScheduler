name: Playwright Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    timeout-minutes: 60
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpassword
          POSTGRES_DB: smartscheduler_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Install Playwright Browsers
      run: npx playwright install --with-deps

    - name: Set up test environment
      run: |
        cp .env.example .env || echo "No .env.example found"
        echo "DATABASE_URL=postgresql://testuser:testpassword@localhost:5432/smartscheduler_test" >> .env
        echo "SESSION_SECRET=test-secret-key-for-ci" >> .env
        echo "NODE_ENV=test" >> .env

    - name: Run database migrations
      run: npm run db:push
      continue-on-error: true

    - name: Start server and verify health
      run: |
        echo "Starting server in background..."
        npm run dev &
        SERVER_PID=$!
        echo "Server PID: $SERVER_PID"
        
        echo "Waiting for server to start..."
        for i in {1..30}; do
          if curl -f http://localhost:5000/api/health 2>/dev/null; then
            echo "✅ Server is responding on localhost:5000"
            break
          fi
          if [ $i -eq 30 ]; then
            echo "❌ Server failed to start within 30 seconds"
            kill $SERVER_PID 2>/dev/null || true
            exit 1
          fi
          echo "Attempt $i/30: Server not ready yet, waiting..."
          sleep 1
        done
        
        kill $SERVER_PID 2>/dev/null || true
        echo "Server health check completed successfully"
      env:
        CI: true
        HOST: localhost

    - name: Run Playwright tests
      run: npm test
      env:
        CI: true
        HOST: localhost

    - name: Upload Playwright Report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: playwright-report
        path: playwright-report/
        retention-days: 30

    - name: Upload Test Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: test-results/
        retention-days: 30

    - name: Comment PR with test results
      uses: daun/playwright-report-comment@v3
      if: always() && github.event_name == 'pull_request'
      with:
        report-path: playwright-report/index.html
